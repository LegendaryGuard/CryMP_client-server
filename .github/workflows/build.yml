################################################################################
# Reusable build workflow
################################################################################

name: Build

on:
  workflow_call:
    inputs:
      bits:
        required: true
        type: string
      type:
        required: true
        type: string
      sign:
        required: false
        default: false
        type: boolean
    outputs:
      hash:
        description: "Hash of the build"
        value: ${{ jobs.windows_msvc.outputs.hash }}

jobs:
  windows_msvc:
    runs-on: windows-latest

    env:
      BUILD_DIR: ${{ github.workspace }}\Build${{ inputs.bits }}

    outputs:
      hash: ${{ steps.build.outputs.hash }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Ninja
        run: |
          $release = Invoke-RestMethod 'https://api.github.com/repos/ninja-build/ninja/releases/latest'
          $release
          $asset = $release.assets | where { $_.name -eq 'ninja-win.zip' }
          New-Item $env:BUILD_DIR\ninja -ItemType Directory | Out-Null
          Invoke-WebRequest $asset.browser_download_url -OutFile $env:BUILD_DIR\ninja.zip
          Expand-Archive $env:BUILD_DIR\ninja.zip -DestinationPath $env:BUILD_DIR\ninja
          "NINJA_DIR=$env:BUILD_DIR\ninja" >> $env:GITHUB_ENV

      - name: Build
        id: build
        run: |
          $vs_where = 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe'
          $vs_path = & $vs_where -latest -property installationPath
          Import-Module $vs_path\Common7\Tools\Microsoft.VisualStudio.DevShell.dll
          $arch = if (${{ inputs.bits }} -eq 32) { 'x86' } else { 'amd64' }
          Enter-VsDevShell -VsInstallPath $vs_path -SkipAutomaticLocation -Arch $arch
          $env:PATH = $env:NINJA_DIR + ';' + $env:PATH
          cmake -S . -B $env:BUILD_DIR -G Ninja -D CMAKE_BUILD_TYPE=${{ inputs.type }}
          cmake --build $env:BUILD_DIR
          $exe_path = "$env:BUILD_DIR\CryMP-Client${{ inputs.bits }}.exe"
          'hash=' + (Get-FileHash $exe_path -Algorithm SHA256).Hash.ToLower() >> $env:GITHUB_OUTPUT

      - name: Sign
        if: ${{ inputs.sign }}
        env:
          CODE_SIGNING_PFX: ${{ secrets.CODE_SIGNING_PFX }}
          CODE_SIGNING_PFX_PASSWORD: ${{ secrets.CODE_SIGNING_PFX_PASSWORD }}
        run: |
          Set-Content -Path bundle.txt -Value $env:CODE_SIGNING_PFX
          certutil -decode bundle.txt bundle.pfx
          $signtool = 'C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe'
          & $signtool sign /fd SHA256 /f bundle.pfx /p "$env:CODE_SIGNING_PFX_PASSWORD" `
            /tr "http://timestamp.digicert.com" /td SHA256 `
            (Get-Item $env:BUILD_DIR\*.exe).FullName
          Remove-Item bundle.*

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: CryMP-Client${{ inputs.bits }}-${{ steps.build.outputs.hash }}
          path: |
            ${{ env.BUILD_DIR }}\*.exe
            ${{ env.BUILD_DIR }}\*.pdb
